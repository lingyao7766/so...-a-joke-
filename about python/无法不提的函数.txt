基本上所有的高级语言都支持函数，Python也不例外。Python不但能非常灵活地定义函数，而且本身内置了很多有用的函数，可以直接调用。




关于函数和抽象

   抽象
抽象是数学中非常常见的概念。举个例子：
计算数列的和，比如：1 + 2 + 3 + ... + 100，写起来十分不方便，于是数学家发明了求和符号∑，可以把1 + 2 + 3 + ... + 100记作：
100
∑n
n=1
这种抽象记法非常强大，因为我们看到 ∑ 就可以理解成求和，而不是还原成低级的加法运算。
而且，这种抽象记法是可扩展的，比如：
100
∑(n2+1)
n=1
还原成加法运算就变成了：
(1 x 1 + 1) + (2 x 2 + 1) + (3 x 3 + 1) + ... + (100 x 100 + 1)
可见，借助抽象，我们才能不关心底层的具体计算过程，而直接在更高的层次上思考问题。
写计算机程序也是一样，函数就是最基本的一种代码抽象的方式。





举例型介绍：

             s = area_of_circle(x)

应用举例：
import math  # 导入math模块，下面用到pi

list1 = [12.34, 9.08, 73.1]  # 将3个不同面积的圆半径定义成一个list


def area_sum(i):  # 定义area_sum函数，套用圆的面积计算公式
    area = math.pi * i * i
    print(area)  # 打印圆的面积


for j in list1:  # 将列表的3个半径循环
    area_sum(j)  # 一次将值给area_sum函数


简化版哈（）
import math
l=[12.34,9.08,7.31]

def area1(r):
  area = math.pi*r*r
  print(area)

for j in l:
  area1(j)

（此故事告诉我们许多事情都是非必要的）








           函数的调用




Python内置了很多有用的函数，我们可以直接调用。
要调用一个函数，需要知道函数的名称和参数， 比如 求绝对值的函数abs ，只有一个参数。可以直接从Python的官方网站查看文档；也可以在交互式命令行通过  help(abs)  查看abs函数的帮助信息。

调用函数的时候，如果传入的参数数量不对，会报TypeError的错误，并且Python会明确地告诉你：abs()有且仅有1个参数，但给出了两个
如果传入的参数数量是对的，但参数类型不能被函数所接受，也会报TypeError的错误，并且给出错误信息：str是错误的参数类型：

Python内置的常用函数还包括数据类型转换函数，比如int()函数可以把其他数据类型转换为整数：
>>> int(12.34)
12
>>> str(1.23)
'1.23'
>>> bool(1)
True
>>> bool('')
False

函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：
>>> a = abs # 变量a指向abs函数
>>> a(-1) # 所以也可以通过a调用abs函数
1

练习
请利用Python内置的hex()函数把一个整数转换成十六进制表示的字符串：

我的答案（完美运行）：
# -*- coding: utf-8 -*-

n1 = 255
n2 = 1000
print(hex(n1),hex(n2))









                  定义函数




在Python中，定义一个函数要使用 def 语句， 依次写出 函数名 、 括号 、 括号中的参数 和 冒号 : ，然后，在缩进块中编写函数体，函数的返回值用return语句返回。

例：自定义一个求绝对值的my_abs函数

# -*- coding: utf_8 -*-
def my_abs(x):
  if x<=0:
    return -x
  else:
    return x
print (my_abs(-99))

请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。
如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。
   ↓
如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：

>>> from abstest import my_abs  
>>> my_abs(-9) 
9
>>> _ 


空函数
如果想定义一个什么事也不做的空函数，可以用pass语句：

def nop():
    pass

pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。
pass还可以用在其他语句里，比如：

if age >= 18:
    pass

缺少了pass，代码运行就会有语法错误。


参数检查
调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出TypeError：
>>> my_abs(1, 2)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: my_abs() takes 1 positional argument but 2 were given
但是如果参数类型不对，Python解释器就无法帮我们检查。试试my_abs和内置函数abs的差别：
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 2, in my_abs
TypeError: unorderable types: str() >= int()
>>> abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bad operand type for abs(): 'str'
当传入了不恰当的参数时，内置函数abs会检查出参数错误，而我们定义的my_abs没有参数检查，会导致if语句出错，出错信息和abs不一样。所以，这个函数定义不够完善。
让我们修改一下my_abs的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数isinstance()实现：
def my_abs(x):
    if not isinstance(x, (int, float)):
        raise TypeError('bad operand type')
    if x >= 0:
        return x
    else:
        return -x
添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：
>>> my_abs('A')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 3, in my_abs
TypeError: bad operand type
错误和异常处理将在后续讲到。


返回多个值
函数可以返回多个值吗？答案是肯定的。
比如在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的新的坐标：
import math

def move(x, y, step, angle=0):
    nx = x + step * math.cos(angle)
    ny = y - step * math.sin(angle)
    return nx, ny

import math语句表示导入math包，并允许后续代码引用math包里的sin、cos等函数。
然后，我们就可以同时获得返回值：

>>> x, y = move(100, 100, 60, math.pi / 6)
>>> print(x, y)
151.96152422706632 70.0

但其实这只是一种假象，Python函数返回的仍然是单一值：

>>> r = move(100, 100, 60, math.pi / 6)
>>> print(r)
(151.96152422706632, 70.0)

返回值是一个tuple！在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。



练习
请定义一个函数quadratic(a, b, c)，接收3个参数，返回一元二次方程：
ax2 + bx + c = 0
的两个解。
提示：计算平方根可以调用math.sqrt()函数

自做（debug*6）：
# -*- coding: utf-8 -*-
import math

def quadratic(a,b,c):

  delta=(b*b-4*a*c)
  if delta>0:
    x1=(-b+math.sqrt(delta))/(2*a)  #不是第一次了..即便是乘除法也要加上括号才万无一失
    x2=(-b-math.sqrt(delta))/(2*a)  #这里使用math的方法，math.后面加所需函数
    return x1,x2
  elif delta==0:
    x=(-b+sqrt(delta))/2*a
    return x
  else:
    return ('无实数根')

print('quadratic(2, 3, 1) =', quadratic(2, 3, 1))
print('quadratic(1, 3, -4) =', quadratic(1, 3, -4))

if quadratic(2, 3, 1) != (-0.5, -1.0):
    print('测试失败')
elif quadratic(1, 3, -4) != (1.0, -4.0):
    print('测试失败')
else:
    print('测试成功')






