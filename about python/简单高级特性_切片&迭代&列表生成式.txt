
                                                   1. 切片（Slice）

取前3个元素，用一行代码就可以完成切片：

>>> L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']

>>> L[0:3]
['Michael', 'Sarah', 'Tracy']

L[0:3]表示，从索引0开始取，直到索引3为止，但 ※不包括索引3 。即索引0，1，2，正好是3个元素。（如果第一个索引是0，还可以省略：>>> L[:3]  ）

>>> L[1:3]          #从索引1开始，取出2个元素
['Sarah', 'Tracy']

>>> L[-2:]        #类似的，既然Python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片
['Bob', 'Jack']
>>> L[-2:-1]       #记住倒数第一个元素的索引是-1。
['Bob']


※※※字符串切片各种应用举例：

首先
创建一个0-99的数列： 
>>> L = list(range(100))     #数列...原来list就可以当作python的数列用
>>> L
[0, 1, 2, 3, ..., 99]
------↓---※---↓-----
>>> L[:10]               #前十个
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> L[-10:]             #后十个
[90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
>>> L[10:20]           #前11到20个
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
>>> L[:10:2]             #前十个中，每两个（隔一个）取一个 ※注意有三个冒号
[0, 2, 4, 6, 8]
>>> L[::5]               #所有的数，每五个取一个
[0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
>>> L[:]                  #什么都不写（只一个[:]）即原样复制一个list
[0, 1, 2, 3, ..., 99]

>>> array[::-1]  #如果想让他们颠倒形成reverse函数的效果（※即逆序输出）
[4, 8, 6, 3, 5, 2, 1]
>>> array[::-2]
[4, 6, 5, 1]

---------------------//
tuple也是一种list，唯一区别是tuple不可变。因此，tuple也可以用切片操作，只是操作的结果仍是tuple：
>>> (0, 1, 2, 3, 4, 5)[:3]
(0, 1, 2)              

字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此，字符串也可以用切片操作，只是操作结果仍是字符串：
>>> 'ABCDEFG'[:3]
'ABC'
>>> 'ABCDEFG'[::2]
'ACEG'
-----------------------------------------------------
另记（ 关于range() ）：
>>> range(1,5) #代表从1到5(不包含5)
[1, 2, 3, 4]
>>> range(1,5,2) #代表从1到5，间隔2(不包含5)
[1, 3]
>>> range(5) #代表从0到5(不包含5)
[0, 1, 2, 3, 4]
----------------------------------------------

练习：
利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：
# -*- coding: utf-8 -*-
def trim(s):

# 测试:
if trim('hello  ') != 'hello':
    print('测试失败!')
elif trim('  hello') != 'hello':
    print('测试失败!')
elif trim('  hello  ') != 'hello':
    print('测试失败!')
elif trim('  hello  world  ') != 'hello  world':
    print('测试失败!')
elif trim('') != '':
    print('测试失败!')
elif trim('    ') != '':
    print('测试失败!')
else:
    print('测试成功!')

------
简洁切题版（翻评论区）
def trim(s):
    try:
        while s[0] == ' ':          #或 s[:1] 亦可
               s = s[1:]
        while s[-1] == ' ':        #或 s[-1:]等效
               s = s[:-1] 
        return s
    except IndexError:          #处理全空格
        return ''
-------
简洁版：

l = []
def trim(s):
    for i in s:
        if i != ' ':
            l.append(i)
    return (''.join(l))


---------------------
（额外）练习【冒泡】：

array = [1, 3, 5, 4, 2, 6, 7]
for i in range(len(array) - 1, 0, -1):       #n-1 轮 （即 i 轮） --（自6到0，相隔-1）
    print (i)       #可省
    for j in range(0, i):           #n-i 次（即 j 次）
        print (j)      #可省
        if array[j] > array[j+1]:       #判断
            array[j], array[j + 1] = array[j + 1], array[j]     #上下替换赋值
print(array)

 （ 详解注解（其实我觉得讲得还没我清楚，而且是基于Py2，学Py3的要带着脑子看）：http://www.cnblogs.com/buro79xxd/archive/2011/05/23/2054493.html   ）
---
另附：sort()方法实现排序：【2、reverse实现降序排序，需要提供一个布尔值：
y = [3, 2, 8 ,0 , 1]
 y.sort(reverse = True)     #True为降序， False为升序    ※←
 print (y) #[8, 3, 2, 1, 0]
】#//基本上一行就能实现..还贼快 估计内置了快速排序一类的算法？
     果然是人生苦短

------------------------------------000----------













                                                  2 . 迭代（Lteration）


”如果给定一个list或tuple，我们可以通过 for循环 来遍历这个 list 或 tuple ，这种遍历我们称为迭代（Iteration）。“

在Python中，迭代是通过 for ... in 来完成的，而很多语言比如C语言和java，迭代list是通过 下标 完成的。――可以看出，Python的for循环抽象程度要高于C的for循环，因为Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。

只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代：
>>> d = {'a': 1, 'b': 2, 'c': 3}
>>> for key in d:
...     print(key)
...
a
c
b

 ※  因为dict的存储不是按照list的方式顺序排列，所以，迭代出的结果顺序很可能不一样。
默认情况下，dict迭代的是key。如果要迭代value，可以用  ※ for value in d.values()   ※，如果要同时迭代key和value，可以用 ※ for k, v in d.items() ※ 。※※※※

------

由于字符串也是可迭代对象，因此，也可以作用于for循环：
>>> for ch in 'ABC':
...     print(ch)
...
A
B
C

...所以，当我们使用for循环时，只要作用于一个可迭代对象，for循环就可以正常运行，而我们不太关心该对象究竟是list还是其他数据类型。
――那么，如何判断一个对象是可迭代对象呢？
方法是通过 collections 模块的 Iterable 类型判断：

>>> from collections import Iterable
>>> isinstance('abc', Iterable) # str是否可迭代
True
>>> isinstance([1,2,3], Iterable) # list是否可迭代
True
>>> isinstance(123, Iterable) # 整数是否可迭代
False
---------

最后一个小问题，如果要对list实现类似Java那样的下标循环怎么办？
――Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：
>>> for i, value in enumerate(['A', 'B', 'C']):
...     print(i, value)
...
0 A
1 B
2 C

※※※上面的for循环里，同时引用了两个变量，在Python里是很常见的，比如下面的代码：
>>> for x, y in [(1, 1), (2, 4), (3, 9)]:
...     print(x, y)
...
1 1
2 4
3 9

--------------------


练习

请使用迭代查找一个list中最小和最大值，并返回一个tuple：
# -*- coding: utf-8 -*-
def findMinAndMax(L):

# 测试
if findMinAndMax([]) != (None, None):
    print('测试失败!')
elif findMinAndMax([7]) != (7, 7):
    print('测试失败!')
elif findMinAndMax([7, 1]) != (1, 7):
    print('测试失败!')
elif findMinAndMax([7, 1, 3, 9, 5]) != (1, 9):
    print('测试失败!')
else:
    print('测试成功!')





递归版：
def findMinAndMax(L):
    if len(L)==0:         # L==[]等效
        return (None,None)
    else:
        min=L[0];
        max=L[0];
        for x in L:
            if x<min:
                min=x
            if x>max:
                max=x
        return(min,max)



实用版： 
def findMinAndMax(L):
if L == []:
        return (None, None)
    return (min(L), max(L)) #用 list 原生的函数做判断

-------------------------------------------------------











                                        3. 列表生成式（List Comprehensions）



举个例子，要生成list [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]可以用list(range(1, 11))：
>>> list(range(1, 11))

但如果要生成[1x1, 2x2, 3x3, ..., 10x10]怎么做？
方法一是循环：
>>> L = []
>>> for x in range(1, 11):
...    L.append(x * x)
...
>>> L
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

...果然还是太繁琐了
来来来看看列表生成器（笑）

列表生成式则可以用一行语句代替循环生成上面的list：

>>> [x * x for x in range(1, 11)]

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

（写列表生成式时，把要生成的元素x * x放到前面，后面跟for循环，就可以把list创建出来，十分有用，多写几次，很快就可以熟悉这种语法。）

for循环后面还可以加上if判断，这样我们就可以筛选出仅偶数的平方：
>>> [x * x for x in range(1, 11) if x % 2 == 0]
[4, 16, 36, 64, 100]

特注：带着if时前端必须有x
例：>>> [x for x in range(1, 11) if x % 2 != 0]
[1, 3, 5, 7, 9]
#没有x会bug
----
还可以使用两层循环，可以生成全排列：
>>> [m + n for m in 'ABC' for n in 'XYZ']
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']

>>> import os # 导入os模块，模块的概念后面讲到
>>> [d for d in os.listdir('.')] # os.listdir可以列出文件和目录
['.emacs.d', '.ssh', '.Trash', 'Adlm', 'Applications', 'Desktop', 'Documents', 'Downloads', 'Library', 'Movies', 'Music', 'Pictures', 'Public', 'VirtualBox VMs', 'Workspace', 'XCode']

for循环其实可以同时使用两个甚至多个变量，比如dict的items()可以同时迭代key和value：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> for k, v in d.items():
...     print(k, '=', v)
...
y = B
x = A
z = C
――因此，列表生成式当然也可以使用两个变量来生成list：
>>> d = {'x': 'A', 'y': 'B', 'z': 'C' }
>>> [k + '=' + v for k, v in d.items()]
['y=B', 'x=A', 'z=C']



最后把一个list中所有的字符串变成小写：
>>> L = ['Hello', 'World', 'IBM', 'Apple']
>>> [s.lower() for s in L]
['hello', 'world', 'ibm', 'apple']





练习
如果list中既包含字符串，又包含整数，由于非字符串类型没有lower()方法，所以列表生成式会报错：
>>> L = ['Hello', 'World', 18, 'Apple', None]
>>> [s.lower() for s in L]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<stdin>", line 1, in <listcomp>
AttributeError: 'int' object has no attribute 'lower'

使用内建的isinstance函数可以判断一个变量是不是字符串：
>>> x = 'abc'
>>> y = 123
>>> isinstance(x, str)
True
>>> isinstance(y, str)
False
请修改列表生成式，通过添加if语句保证列表生成式能正确地执行：
# -*- coding: utf-8 -*-
L1 = ['Hello', 'World', 18, 'Apple', None]


标准版：
L2=[s.lower() for x in L1 if isinstance(s,str)]
