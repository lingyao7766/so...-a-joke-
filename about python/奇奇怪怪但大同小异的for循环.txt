
Python的循环有两种，一种是for...in循环，依次把list或tuple中的每个元素迭代出来。

第二种循环是while循环，只要条件满足，就不断循环，条件不满足时退出循环。

看例子：
（for x in ...）
names = ['Michael', 'Bob', 'Tracy']
for name in names:
    print(name)

执行这段代码，会依次打印names的每一个元素：
Michael
Bob
Tracy


  所以for x in ...循环就是把每个元素代入变量x，然后执行缩进块的语句


我们想计算1-10的整数之和，可以用一个sum变量做累加：
sum = 0
for x in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]:
    sum = sum + x
print(sum)


         (下面重点)
        range()函数
 可以生成一个整数序列

比如range(5)生成的序列是从0开始小于5的整数：
>>> list(range(5))
[0, 1, 2, 3, 4]


range(101)生成0-100的整数序列，计算如下：

# -*- coding: utf-8 -*-
sum=0
for x in range(101):
	sum=sum+x
print(sum)




（while）

如我们要计算100以内所有 奇数 之和，可以用while循环实现：

sum = 0
n = 99
while n > 0:
    sum = sum + n
    n = n - 2
print(sum)

在循环内部变量n不断自减，直到变为-1时，不再满足while条件，循环退出。


特注！！特注！！！
非常重要！！！！！

”while“语句的本质――即是“当何时运转”，括号里的是 “  运行条件  ” 而非“终止条件”

（如，当我打出 "n=5 while(n>1): " 时，程序为无尽循环）：
（ n=5
while(n>1):
	print(n)
	n=n+2
print('end') ）






练习

请利用循环依次对list中的每个名字打印出Hello, xxx!：

# -*- coding: utf-8 -*-
L = ['Bart', 'Lisa', 'Adam']
for l in L:
	print('hello,%s'%l)


or

# -*- coding: utf-8 -*-
L=['Bart','Lisa','Adam']
n=0
while (n<3):
	print("hello,%s!"%L[n])
	n=n+1





   break
在循环中，break语句可以提前退出循环。例如，本来要循环打印1～100的数字：
n = 1
while n <= 100:
    print(n)
    n = n + 1
print('END')
上面的代码可以打印出1~100。
如果要提前结束循环，可以用break语句：
n = 1
while n <= 100:
    if n > 10: # 当n = 11时，条件满足，执行break语句
        break # break语句会结束当前循环
    print(n)
    n = n + 1
print('END')
执行上面的代码可以看到，打印出1~10后，紧接着打印END，程序结束。
可见break的作用是提前结束循环。


   continue
在循环过程中，也可以通过continue语句，跳过当前的这次循环，直接开始下一次循环。
n = 0
while n < 10:
    n = n + 1
    print(n)
上面的程序可以打印出1～10。但是，如果我们想只打印奇数，可以用continue语句跳过某些循环：
n = 0
while n < 10:
    n = n + 1
    if n % 2 == 0: # 如果n是偶数，执行continue语句
        continue # continue语句会直接继续下一轮循环，后续的print()语句不会执行
    print(n)
执行上面的代码可以看到，打印的不再是1～10，而是1，3，5，7，9。
可见continue的作用是提前结束本轮循环，并直接开始下一轮循环。


（小结
循环是让计算机做重复任务的有效的方法。
break语句可以在循环过程中直接退出循环，而continue语句可以提前结束本轮循环，并直接开始下一轮循环。这两个语句通常都必须配合if语句使用。
要特别注意，不要滥用break和continue语句。break和continue会造成代码执行逻辑分叉过多，容易出错。大多数循环并不需要用到break和continue语句，上面的两个例子，都可以通过改写循环条件或者修改循环逻辑，去掉break和continue语句。）


练习（鬼畜）：

有些时候，如果代码写得有问题，会让程序陷入“死循环”，也就是永远循环下去。这时可以用Ctrl+C退出程序，或者强制结束Python进程。

......
请 试写一个  死循环  程序 。
：

来自萌新（自己怕是也就这水平）：

L = ['Bart', 'Lisa', 'Adam']
i = 1
while i>0:
    print('Hello,',L[i-1])
    i = 1



来自有基础者：

L = ['Bart', 'Lisa', 'Adam']
i = 0
while i >= 0:
    print(L[i % 3])
    i += 1

（反复循环用取余反而可以达到，加减乘除难办――终于体会到了%的正确用法）


自己最后写出来的：

# -*- coding: utf-8 -*-
L=['Bart','Lisa','Adam']
n=4
while n>3:
	print("hello,%s!"%L[n%3])
	n=n+1


































额..for in 说白了就是遍历，其实没什么实际上的难度
倒是while,基本上用法和c/c++相同，灵活的很却又没有讲多少，对完全没有基础的初学者怕是有一点点运用困难

这儿少扯一点while的用法，基础为主，说错了我改（同学和暗中偷窥的大佬明鉴）

while――即当型循环，其本质概括成一句话便是：“当何时运转”，括号里的放是 “  运行条件  ” （而非“终止条件”）
例：
如，当我打出 "n=5 while(n>1): " 时，程序即为不断+2永久运行的无尽循环）：
（可以粘贴下去试一试↓
# -*- coding: utf-8 -*-
n=5
while(n>1):
	print(n)
	n=n+2
print('end')   #此行为无用代码，删之亦可
）

**关于三个名字的循环**

其实这个非常简单哒...
不知道某些已入了门的新秀和 大佬（？）什么心态，非要说复杂了才开心。（逃
还记得前面弄出来那个“练习”吗？
（   就是这个↓
# -*- coding: utf-8 -*-
L=['Bart','Lisa','Adam']
n=0
while n<3:
    print("hello,%s!"%L[n])
    n+=1       #  n+=1 即 “n=n+1” ,算是编程里的常识，有其它语言基础的应该不难理解；零基础的嘛...这里记住就行了（当然你要感兴趣的话完全可以去百度一下）
 
 ）

首先，三个名字的循环、在同一个list里，取余是最常用的方法。（因为取余号本身的性质保证它有可能在几个数间循环而不是单纯升降）
于是这里对3取个余就行了（因为要循环的是三个名字）
即：
L[n%3]

来让我们把它放到练习里“L[n]”的位置：
	print("hello,%s!"%L[n%3])
    n+=1
    
...然后把上面改成死循环；
代码即是：
# -*- coding: utf-8 -*-
L=['Bart','Lisa','Adam']
n=4       # 为什么偏偏这么改？当然是因为简洁美（懒）啦！
while n>3:
    print("hello,%s!"%L[n%3])
    n+=1
    
当然这里只说循环三个人没有非要限制起始名称...不过你要是真有强迫症也可以改成这样：
# -*- coding: utf-8 -*-
L=['Bart','Lisa','Adam']
n=0
while n>=0:
    print("hello,%s!"%L[n%3])
    n+=1
    
诺，这样（死）循环就从Bart开始了。