
原
strlen(char *)和str.length()以及str.size()的区别
2014年04月11日 17:45:15
阅读数：3757
strlen(char *):

C语言函数，参数为char *，用来求字符数组的长度。

#include<stdio.h>
#include<cstring>
int main()
{
char*s="Nice to meet you!";
printf("%s has %d chars\n",s,strlen(s));
return 0;
}

输出：Nice to meet you! has 17 chars




str.length()和str.size():
 	↑
用于求string类对象长度的成员函数


#include<iostream>
#include<string>
using namespace std;

int main()
{
string str="blabla";
cout<<str.length()<<endl;
cout<<str.size()<<endl;
return 0;
}
输出：

6

6

注意：#include<string.h>和#include<cstring>以及#include<string>的区别

#include<string.h>和#include<cstring>都是C语言的头文件，#include<string>为C++的头文件



strlen和sizeof的区别：



1.sizeof操作符的结果类型是size_t，它在头文件中typedef为unsigned int类型。
该类型保证能容纳实现所建立的最大对象的字节大小。 

2.sizeof是算符，strlen是函数。 

3.sizeof可以用类型做参数，strlen只能用char*做参数，且必须是以''\0''结尾的。
sizeof还可以用函数做参数，比如： 
short f();
printf("%d\n", sizeof(f()));
输出的结果是sizeof(short)，即2。 

4.数组做sizeof的参数不退化，传递给strlen就退化为指针了。 

5.大部分编译程序 在编译的时候就把sizeof计算过了 是类型或是变量的长度这就是sizeof(x)可以用来定义数组维数的原因 
char str[20]="0123456789";
int a=strlen(str); //a=10;
int b=sizeof(str); //而b=20;

6.strlen的结果要在运行的时候才能计算出来，时用来计算字符串的长度，不是类型占内存的大小。 

#include<iostream>
#include<string>
using namespace std;


int main()
{
char * ss = "12345678";
int a=sizeof(ss);
int b=strlen(ss);
cout<<a<<" "<<b<<endl;
}

输出：

4

8


------------------------------------------ ---------- getline()



C++:cin、cin.getline()、getline()的用法
主要内容：

1、cin用法

2、cin.getline()用法

3、getline()用法

3、注意的问题

 

一、cin>>
用法1：输入一个数字或字符

#include <iostream>
using namespace std;
main ()
{
int a,b;
cin>>a>>b;
cout<<a+b<<endl;
}

用法2：接收一个字符串，遇“空格”、“TAB”、“回车”就结束

#include <iostream>
using namespace std;
main ()
{
char a[20];
cin>>a;
cout<<a<<endl;
}

输入：jkljkljkl
输出：jkljkljkl

输入：jkljkl jkljkl       //遇空格结束
输出：jkljkl

二、cin.getline()
用法:接收一个字符串，可以接收空格并输出

#include <iostream>
using namespace std;
main ()
{
char m[20];
cin.getline(m,5);
cout<<m<<endl;
}

输入：jkljkljkl
输出：jklj

接收5个字符到m中，其中最后一个为'\0'，所以只看到4个字符输出；

如果把5改成20：
输入：jkljkljkl
输出：jkljkljkl

输入：jklf fjlsjf fjsdklf
输出：jklf fjlsjf fjsdklf

延伸：
1、cin.getline()实际上有三个参数，cin.getline(接收字符串的变量,接收字符个数,结束字符)
2、当第三个参数省略时，系统默认为'\0'
3、如果将例子中cin.getline()改为cin.getline(m,5,'a');当输入jlkjkljkl时输出jklj，输入jkaljkljkl时，输出jk

三、getline()      ※常用 ===
用法：接收一个字符串，可以接收空格并输出，需包含“#include<string>”

#include<iostream>
#include<string>
using namespace std;
main ()
{
string str;
getline(cin,str);
cout<<str<<endl;
}

输入：jkljkljkl
输出：jkljkljkl

输入：jkl jfksldfj jklsjfl
输出：jkl jfksldfj jklsjfl

四、注意的问题
1、cin.getline()属于istream流，而getline()属于string流，是不一样的两个函数

2、当同时使用cin>>,getline()时，需要注意的是，在cin>>输入流完成之后，getline()之前，需要通过

str="\n";
getline(cin,str);

的方式将回车符作为输入流cin以清除缓存，如果不这样做的话，在控制台上就不会出现getline()的输入提示，而直接跳过，因为程序默认地将之前的变量作为输入流。

看下面一段程序：

/*-------------Basic Input/Output-------------*/
#include<iostream>
#include<string>
#include<sstream>
using namespace std;

int main(){
    int age;
    //standard input(cin)
    cout<<"Please enter an integer value as your age: ";
    cin>>age;
    cout<<"Your ager is: "<<age<<".\n";
    //cin and string
    string mystr;
    cout<<"What's your name? "<<endl;
   mystr="\n";
    getline(cin,mystr);
    getline(cin,mystr);
    cout<<"Hello,"<<mystr<<".\n";
    char sex;
    cout<<"Please enter a F or M as your sex: ";
    cin>>sex;
    cout<<"Your sex is: "<<sex<<endl;
    cout<<"What's your favorite team? ";
    mystr="\n";
    getline(cin,mystr);
    getline(cin,mystr);
    cout<<"I like "<<mystr<<".\n";

    system("pause");
    return 0;
}

运行结果为：

image

如果不添加红色代码，则运行结果为：

image