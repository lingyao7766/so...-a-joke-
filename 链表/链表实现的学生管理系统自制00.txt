//刚debug完的自制版本 --100%自主实现
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>

typedef struct Data
{
    char number[20];
    char name[20];
    char sex[10];
    int age;
    char examtype[20];
}Data;
typedef struct node
{
    Data data;
    struct node *next;
}node;

node* CreatList()  //创建链表
{
    node *L,*p1,*p2;
    int i,n;
    printf("请输入学生人数：\n");
    scanf("%d",&n);
    printf("请输入学生信息：\n");
    L=(node*)malloc(sizeof(node)); //创建头节点 L
    p2=L;
    for(i=0;i<n;i++)
    {
        p1=(node*)malloc(sizeof(node));
        scanf("%s%s%s%d%s",p1->data.number,p1->data.name,p1->data.sex,&p1->data.age,p1->data.examtype);
        p2->next=p1;
        p2=p1;
    }
    p2->next=NULL;
    printf("学生信息创建成功");
    return L;
}

void Print(node *L)  //输出
{
    node *p=L->next; //p指向头节点的下一个
    while(p!=NULL)
    {
        printf("%s%s%s%d%s\n",p->data.number,p->data.name,p->data.sex,p->data.age,p->data.examtype);
        p=p->next;
    }
}

void Search(node * L)   //查找（按照学号）
{
    node *p=L->next;
    char num[20];
    printf("请输入查找的学号\n");
    scanf("%s",num);
    while(p!=NULL)
    {
        if(strcmp(p->data.number,num)==0) //strcmp() 字符串比较函数，当括号中二者相同时返回0
        {
            printf("%s%s%s%d%s\n",p->data.number,p->data.name,p->data.sex,p->data.age,p->data.examtype);
            break;
        }
        else
            p=p->next;
    }
}

void AddList(node * L)   //增 ――将信息添加在头节点之后
{
    int n;
    node *p=L->next; 
    node *m=NULL;
    printf("请输入要添加的人数");
    scanf("%d",&n);
    printf("请分别输入学生的信息");
    int i;
    for(i=0;i<n;i++)
    {
        m=(node*)malloc(sizeof(node));  //开辟新结点m
        scanf("%s%s%s%d%s",m->data.number,m->data.name,m->data.sex,&m->data.age,m->data.examtype);
        L->next=m;
        m->next=p;
    }
    printf("添加成功\n");
}

void Delete(node * L)   //删除
{
    node *p=L->next;
    node *pre=L; //前驱结点pre
    //node *q;
    printf("请输入要删除的的学生学号：\n");
    char num[20];
    scanf("%s",num);
    while((pre!=NULL)&&(pre->next->data.number!=num)) //查找元素e的前驱
       {
           pre=pre->next;
       }
    p=pre->next;  //*p即在*pre之后

    if(p!=NULL)
        {
            pre->next=p->next; //略过查找到的点让前驱结点直接连到后面结点
            free(p);
            printf("删除成功\n");
        }
    else{printf("未查找到此同学\n");}
}

void Modificatino(node *L) //修改
{
    node *p=L->next;
    char num[20];
    printf("请输入需要修改的学生学号：\n");
    scanf("%s",num);
    while(p!=NULL)
    {
        if(strcmp(p->data.number,num)==0)
        {
            printf("请重新输入考生信息：\n");
        scanf("%s%s%s%d%s",p->data.number,p->data.name,p->data.sex,&p->data.age,p->data.examtype);
            printf("修改成功\n");
            break;
        }
        p=p->next; //
    }
    if(p==NULL) {printf("没有此考生\n");}

}

int main()  //终于尼玛到了
{
    int n;
    node *L=NULL;
    printf("-----------//--欢迎使用学生管理系统--//-------------\n");
    printf("----*           1.创建学生信息表               *\n");
    printf("----*           2.查找学生信息表               *\n");
    printf("----*           3.增加学生信息表               *\n");
    printf("----*           4.删除学生信息表               *\n");
    printf("----*           5.修改学生信息表               *\n");
    printf("----*           6.输出学生信息表               *\n");
    printf("----*               7退出                      *\n");
    printf("//-------------------------------------------------//\n");
    printf("请输入要使用的功能编号:\n");
    while(scanf("%d",&n)!=EOF)
    {
        switch(n)
        {
            case 1:
                L=CreatList();
                break;
            case 2:
                Search(L);
                break;
            case 3:
                AddList(L);
                break;
            case 4:
                Delete(L);
                break;
            case 5:
                Modificatino(L);
                break;
            case 6:
                Print(L);
                break;
            case 7:
                exit(0);
            default:
                printf("输入有误，请重新输入：\n");
        }
    }
return 0;
}
