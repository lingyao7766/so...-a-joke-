修改自CSDN  现已可以运行

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#define Maxlen 100
typedef struct Data//定义链表的元素个体
{
    char number[20];
    char name[20];
    char sex[10];
    int age;
    char examtype[20];
}Data;
typedef Data ElemType;
typedef struct Sqlist
{
    ElemType data;//保存元素的链表
    struct Sqlist *next;
}Sqlist;
/*****************************创建链表*********************************/
Sqlist* CreateList(Sqlist *L)
{
    Sqlist *s,*r;
    int i,n;
    printf("请输入考生人数：\n");
    scanf("%d",&n);
    printf("请输入考生信息：\n");
    L=(Sqlist *)malloc(sizeof(Sqlist));//创建头结点
    r=L;
    for(i=0; i<n; i++)
    {
        s=(Sqlist*)malloc(sizeof(Sqlist));
        scanf("%s%s%s%d%s",s->data.number,s->data.name,s->data.sex,&s->data.age,s->data.examtype);
        r->next=s;
        r=s;
    }
    r->next=NULL;
    printf("创建成功！\n");
    return L;
}
//*****************************输出链表*********************************/
void DispList(Sqlist *L)
{
    Sqlist *p=L->next;
    while(p!=NULL)
    {
        printf("%s %s %s %d %s\n",p->data.number,p->data.name,p->data.sex,p->data.age,p->data.examtype);
        p=p->next;
    }
}
//*****************************查找链表*********************************/
void SearchList(Sqlist *L)
{
    Sqlist *p=L->next;
    char num1[20];
    printf("请输入查找的考生号：\n");
    scanf("%s",num1);
    while(p!=NULL)
    {
        if(strcmp(p->data.number,num1)==0)
        {
            printf("%s %s %s %d %s\n",p->data.number,p->data.name,p->data.sex,p->data.age,p->data.examtype);
            break;
        }
        p=p->next;
    }
    if(p==NULL)
        printf("没有此考生！\n");
}
/*****************************增加链表*********************************/
void AddList(Sqlist *L)//将信息插在头结点之后
{
    int n;
    Sqlist *p=L->next;
    Sqlist*s=NULL;
    printf("请输入增加考生人数：\n");
    scanf("%d",&n);
    printf("请输入考生信息：\n");
    int i;
    for(i=0; i<n; i++)
    {
        s=(Sqlist*)malloc(sizeof(Sqlist));
        scanf("%s%s%s%d%s",s->data.number,s->data.name,s->data.sex,&s->data.age,s->data.examtype);
        L->next=s;
        s->next=p;
    }
    printf("增加成功！\n");
}
/*****************************修改链表*********************************/
void ReviseList(Sqlist *L)
{
    Sqlist *p=L->next;
    char num2[20];
    printf("请输入修改的考生号：\n");
    scanf("%s",num2);
    while(p!=NULL)
    {
        if(strcmp(p->data.number,num2)==0)
        {
            printf("请重新输入考生信息：\n");
            scanf("%s%s%s%d%s",p->data.number,p->data.name,p->data.sex,&p->data.age,p->data.examtype);
            printf("修改成功！\n");
            break;
        }
        p=p->next;
    }
    if(p==NULL)
        printf("没有此考生！\n");
}
/*****************************删除链表*********************************/
void DeleteList(Sqlist *L)
{
    Sqlist *p=L->next;
    Sqlist *pre=L,*r=p,*rpre=pre;//pre始终指向其前驱节点
    char num3[20];
    printf("请输入要删除的考生号：\n");
    scanf("%s",num3);
    while(p!=NULL)
    {
        if(strcmp(p->data.number,num3)==0)//若相等
        {
            r=p;                          //更改r
            rpre=pre;                     //更改rpre
        }
        pre=p;                            //p。pre同步后移一个节点
        p=p->next;
    }
    rpre->next=r->next;                   //删除rpre节点
    free(r);
    printf("删除成功！\n");
}
/*****************************测试链表*********************************/
int main()
{
    int n;
    Sqlist *a;
    Sqlist *L=NULL;
   printf("***********欢迎进入考生管理系统*************\n");
    printf("*           1.创建学生信息表               *\n");
    printf("*           2.查找学生信息表               *\n");
    printf("*           3.修改学生信息表               *\n");
    printf("*           4.删除学生信息表               *\n");
    printf("*           5.增加学生信息表               *\n");
    printf("*           6.输出学生信息表               *\n");
    printf("*           7.退出系统                     *\n");
    printf("********************************************\n");
    printf("请根据提示操作！\n");
    while(scanf("%d",&n)!=EOF)
    {
        switch(n)
        {
        case 1:
            L=CreateList(a);
            break;
        case 2:
            SearchList(L);
            break;
        case 3:
            ReviseList(L);
            break;
        case 4:
            DeleteList(L);
            break;
        case 5:
            AddList(L);
            break;
        case 6:
            DispList(L);
            break;
        case 7:
            exit(0);
        default:
            printf("输入有误！\n");
        }
    }

    return 0;
}
